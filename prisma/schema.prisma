generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  HIGH
  MEDIUM
  LOW
}

enum UserRole {
  CUSTOMER
  AGENT
  QAM
  ADMIN
}

model Team {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?  @db.Text
  members     User[]   @relation("TeamMembers")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Ticket {
  id            Int                @id @default(autoincrement())
  title         String             @db.VarChar(255)
  description   String             @db.Text
  status        TicketStatus       @default(OPEN)
  priority      TicketPriority     @default(LOW)
  reporterId    String?            @db.VarChar(255)
  reporter      User?              @relation(name: "Reporter", fields: [reporterId], references: [id])
  // assignedUsers User[]        @relation(name: "AssignedTickets", through: TicketAssignment)
  assignedUsers TicketAssignment[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  documents Document[] @relation("TicketDocuments")

  Document Document[]
}

model Document {
  id        Int      @id @default(autoincrement())
  url       String   @db.VarChar(255) // URL or path of the uploaded document
  createdAt DateTime @default(now())
  ticketId  Int? // Optional relation to Ticket
  ticket    Ticket?  @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  Ticket Ticket[] @relation("TicketDocuments")
}

model User {
  id              String             @id @default(cuid())
  name            String?
  email           String             @unique
  passwordHash    String
  contactInfoId   String?            @db.VarChar(255)
  contactInfo     ContactInfo?       @relation(fields: [contactInfoId], references: [id])
  emailVerified   DateTime?
  image           String?
  role            UserRole           @default(CUSTOMER)
  teams           Team[]             @relation("TeamMembers")
  accounts        Account[]
  sessions        Session[]
  reportedIssues  Ticket[]           @relation(name: "Reporter")
  // assignedTickets Ticket[]    @relation(name: "AssignedTickets", through: TicketAssignment)
  assignedTickets TicketAssignment[]
}

model TicketAssignment {
  id       Int    @id @default(autoincrement())
  ticketId Int
  userId   String

  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([ticketId, userId]) // Prevents duplicate assignments
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ContactInfo {
  id      String @id @default(cuid())
  phone   String
  address String
  city    String
  country String
  User    User[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
